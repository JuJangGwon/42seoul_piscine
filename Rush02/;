/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jju <jju@student.42seoul.kr>               +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/02/19 14:32:59 by jju               #+#    #+#             */
/*   Updated: 2022/02/20 11:41:36 by jju              ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>



void set_one_to_nine(char c, char hashmap[][2][50], int _ten_to_nineteen);

void	makeHashmap(char *buf, char hashmap[][2][50])
{
	int	i;
	int x;
	int z;
	int is_word;

	x = 0;
	i = 0;
	z = 0;
	is_word = 0;
	while (buf[i])
	{
		if (buf[i] == ':')
		{
			is_word = 1;
			z = 0;
		}
		else if (buf[i] == '\n')
		{
			is_word = 0;
			z = 0;
			x++;
		}
		else if ((buf[i] >= '0' && buf[i] <= '9') || (buf[i] >= 'a' && buf[i] <= 'z'))
		{
			hashmap[x][is_word][z] = buf[i];
			if(x == 1 && is_word == 1)
				write(1, "*", 1);
			z++;
		}
		i++;
	}
}

int	find_len(char *c)
{
	int size;

	size = 0;
	while (c[size])
		size++;
	return (size);
}

void set_hundred(char c, char hashmap[][2][50])
{
	int i;
	int	a;

	i = 0;
	if (c == '0')
		return ;
	a = c - 48;
	while (hashmap[a][1][i])
	{
		write(1, "*", 1);
		write(1, &hashmap[a][1][i++], 1);
	}
	i = 0;
	while (hashmap[28][1][i])
	{
		write(1, &hashmap[28][1][i++], 1);
	}
}

void set_twenty_to_ninety(char _1th, char _2th, char hashmap[][2][50])
{
	int a;
	int _ten_to_nineteen = 0;
	if (_1th >= '2')
	{
		a = _1th - 48 + 20 - 2;
		write(1, hashmap[a][1], sizeof(hashmap[a][1]));
	}
	else if (_1th >= '1')
	{
		_ten_to_nineteen = 1;
	}
	set_one_to_nine(_2th, hashmap, _ten_to_nineteen);
}


void set_one_to_nine(char c, char hashmap[][2][50], int _ten_to_nineteen)
{
	int	a;
	
	if (!_ten_to_nineteen)
	{
		if (c >= '1')
		{
			a = c - 48;
			write(1, hashmap[a][1], sizeof(hashmap[a][1]));
		}
	}
	else
	{
		a = c - 48 + 9;
		write(1, hashmap[a][1], sizeof(hashmap[a][1]));
	}
}

void find_digit(char *c, int *size, int *digit)
{
	*size = find_len(c);
	*digit = ((*size) - 1) / 3;
}

void	write_number(char hashmap[][2][50], int digit, int size, char *c)
{
	int	i;
	int	j;

	j = 0;
	while (digit > 0)
	{
		set_hundred(c[j], hashmap);
		set_twenty_to_ninety(c[j + 1], c[j + 2], hashmap);
		i = 0;
		j = j + 3;
		while (hashmap[digit + 30 + size][1][i])
		{
			//write(1, &hashmap[digit + 30 + size][1][i], 1);
			i++;
		}
		digit--;
	}
}

void	show_hashmap(char hashmap[42][2][50])
{
	int	i;
	int	j;

	i = 0;
	while (i < 42)
	{
		j = 0;
		while (hashmap[i][0][j])
		{
			write(1, &hashmap[i][0][j++], 1);
		}
		write(1, "  ", 2);
		j = 0;
	//	while (hashmap[i][1][j])
	//	{
	//		write(1, &hashmap[i][1][j++], 1);
	//	}
		write(1, "\n", 1);
		i++;
	}
}

int main(void)
{
	int	length;
	char buf[1000];
	char Hashmap[42][2][50];
	int	fd;
	int	size;
	int	digit;

	length = 0;
	if((fd = open("numbers.dict", O_RDWR)) == -1)
	{
		return (0);
	}
	length = read(fd, buf, 1000);
	makeHashmap(buf, Hashmap);
	write(1, Hashmap[1][1], 5);
//	show_hashmap(Hashmap);
//	find_digit("11111111", &size, &digit);
//	write_number(Hashmap, digit, size, "11111111");
	close(fd);
	return (0);
}
